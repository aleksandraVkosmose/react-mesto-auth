{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._options = options;\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n  }\n  _handleOriginalResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  // Получение карточек с сервера\n  getCards() {\n    return fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => this._handleOriginalResponse(res));\n  }\n\n  // Добавление новой карточки через попап\n  setCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._handleOriginalResponse(res));\n  }\n\n  // Ставим лайк карточке\n  setLike(cardId, isLiked) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers\n    }).then(res => this._handleOriginalResponse(res));\n  }\n\n  // Удаление карточки\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._handleOriginalResponse(res));\n  }\n\n  // Получение информации о пользователе с сервера\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => this._handleOriginalResponse(res));\n  }\n\n  // Редактирование информации о пользователе через попап\n  setUserInfo(forms) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(forms)\n    }).then(res => this._handleOriginalResponse(res));\n  }\n\n  // Редактирование аватара пользователя через попап\n  setUserAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._handleOriginalResponse(res));\n  }\n}\nconst api = new Api({\n  baseUrl: `https://mesto.nomoreparties.co/v1/cohort-59`,\n  headers: {\n    authorization: 'f7e16f72-6fdb-4cb4-9e4c-1f17e80e3d75',\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_options","_url","baseUrl","_headers","headers","_handleOriginalResponse","res","ok","json","Promise","reject","status","getCards","fetch","method","then","setCard","data","body","JSON","stringify","name","link","setLike","cardId","isLiked","deleteCard","getUserInfo","setUserInfo","forms","setUserAvatar","avatar","api","authorization"],"sources":["/Users/aleksandramironova/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._options = options;\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n  }\n  _handleOriginalResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  // Получение карточек с сервера\n  getCards() {\n    return fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => this._handleOriginalResponse(res))\n  }\n\n  // Добавление новой карточки через попап\n  setCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._handleOriginalResponse(res))\n  }\n\n  // Ставим лайк карточке\n  setLike(cardId, isLiked) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers,\n    }).then(res => this._handleOriginalResponse(res))\n  }\n\n  // Удаление карточки\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(res => this._handleOriginalResponse(res));\n  }\n\n  // Получение информации о пользователе с сервера\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => this._handleOriginalResponse(res))\n  }\n\n  // Редактирование информации о пользователе через попап\n  setUserInfo(forms) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(forms)\n    }).then(res => this._handleOriginalResponse(res))\n  }\n\n  // Редактирование аватара пользователя через попап\n  setUserAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._handleOriginalResponse(res));\n  }\n}\n\nconst api = new Api({\n  baseUrl: `https://mesto.nomoreparties.co/v1/cohort-59`,\n  headers: {\n    authorization: 'f7e16f72-6fdb-4cb4-9e4c-1f17e80e3d75',\n    \"Content-Type\": \"application/json\",\n  }\n})\n\nexport default api;"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,QAAQ,GAAGD,OAAO;IACvB,IAAI,CAACE,IAAI,GAAGF,OAAO,CAACG,OAAO;IAC3B,IAAI,CAACC,QAAQ,GAAGJ,OAAO,CAACK,OAAO;EACjC;EACAC,uBAAuBA,CAACC,GAAG,EAAE;IAC3B,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAC/C;;EAEA;EACAC,QAAQA,CAAA,EAAG;IACT,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,QAAO,EAAE;MACjCa,MAAM,EAAE,KAAK;MACbV,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC,CAACY,IAAI,CAACT,GAAG,IAAI,IAAI,CAACD,uBAAuB,CAACC,GAAG,CAAC,CAAC;EACnD;;EAEA;EACAU,OAAOA,CAACC,IAAI,EAAE;IACZ,OAAOJ,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,QAAO,EAAE;MACjCa,MAAM,EAAE,MAAM;MACdV,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,IAAI,EAAEL,IAAI,CAACK;MACb,CAAC;IACH,CAAC,CAAC,CAACP,IAAI,CAACT,GAAG,IAAI,IAAI,CAACD,uBAAuB,CAACC,GAAG,CAAC,CAAC;EACnD;;EAEA;EACAiB,OAAOA,CAACC,MAAM,EAAEC,OAAO,EAAE;IACvB,OAAOZ,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,UAASuB,MAAO,QAAO,EAAE;MACjDV,MAAM,EAAG,GAAEW,OAAO,GAAG,KAAK,GAAG,QAAS,EAAC;MACvCrB,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC,CAACY,IAAI,CAACT,GAAG,IAAI,IAAI,CAACD,uBAAuB,CAACC,GAAG,CAAC,CAAC;EACnD;;EAEA;EACAoB,UAAUA,CAACF,MAAM,EAAE;IACjB,OAAOX,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,UAASuB,MAAO,EAAC,EAAE;MAC3CV,MAAM,EAAE,QAAQ;MAChBV,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC,CACCY,IAAI,CAACT,GAAG,IAAI,IAAI,CAACD,uBAAuB,CAACC,GAAG,CAAC,CAAC;EACnD;;EAEA;EACAqB,WAAWA,CAAA,EAAG;IACZ,OAAOd,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,WAAU,EAAE;MACpCa,MAAM,EAAE,KAAK;MACbV,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC,CAACY,IAAI,CAACT,GAAG,IAAI,IAAI,CAACD,uBAAuB,CAACC,GAAG,CAAC,CAAC;EACnD;;EAEA;EACAsB,WAAWA,CAACC,KAAK,EAAE;IACjB,OAAOhB,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,WAAU,EAAE;MACpCa,MAAM,EAAE,OAAO;MACfV,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,KAAK;IAC5B,CAAC,CAAC,CAACd,IAAI,CAACT,GAAG,IAAI,IAAI,CAACD,uBAAuB,CAACC,GAAG,CAAC,CAAC;EACnD;;EAEA;EACAwB,aAAaA,CAACb,IAAI,EAAE;IAClB,OAAOJ,KAAK,CAAE,GAAE,IAAI,CAACZ,IAAK,kBAAiB,EAAE;MAC3Ca,MAAM,EAAE,OAAO;MACfV,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBW,MAAM,EAAEd,IAAI,CAACc;MACf,CAAC;IACH,CAAC,CAAC,CAAChB,IAAI,CAACT,GAAG,IAAI,IAAI,CAACD,uBAAuB,CAACC,GAAG,CAAC,CAAC;EACnD;AACF;AAEA,MAAM0B,GAAG,GAAG,IAAInC,GAAG,CAAC;EAClBK,OAAO,EAAG,6CAA4C;EACtDE,OAAO,EAAE;IACP6B,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAeD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}